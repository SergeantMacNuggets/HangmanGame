import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URL;
/**
 * The {@code Window} class represents the main application window for the Hangman game.
 * It extends {@code JFrame} and implements {@code ActionListener} to handle user actions.
 * <p>
 * This class initializes the game window, sets up the initial menu, plays background sound,
 * and manages transitions between different game scenes based on user interactions.
 * </p>
 */
class Window extends JFrame implements ActionListener {
    private Menu menu,menu1;
    private Scene scene;
    private Categories category;
    /**
     * Constructs a new {@code Window} instance.
     * Initializes the frame properties, sets the icon, and prepares the initial menu.
     * Plays an introductory sound and makes the window visible.
     */
    Window() {
        this.setTitle("Hangman");
        this.setIconImage(new ImageIcon("src/BackgroundSprites/2230897.png").getImage());
        menu = new Menu();
        menu.playButton().addActionListener(this);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setSize(600,600);
        this.setResizable(false);
        this.playSound(getClass().getResource("Sounds/Intro.wav"));
        this.add(menu);
        this.setVisible(true);
        this.pack();
    }
    /**
     * Plays a sound clip from the specified URL.
     * <p>
     * This method handles loading the audio input stream, opening the clip, and starting the playback.
     * If the sound file cannot be found or opened, an error message is displayed, and the application exits.
     * </p>
     * @param sound the URL of the sound file to be played
     */
    private void playSound(URL sound) {
        Clip clip = null;
        try {
            AudioInputStream audioIn;
            audioIn = AudioSystem.getAudioInputStream(sound);
            clip = AudioSystem.getClip();
            clip.open(audioIn);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Intro.wav file cannot be found");
            System.exit(0);
        }
        clip.start();
    }
    /**
     * Sets up action listeners for buttons in the specified {@code Categories} instance.
     * @param c the {@code Categories} instance containing buttons to set up
     */
    private void setCategories(Categories c){
        for(JButton button: c.getButtons()) {
            button.addActionListener(this);
        }
    }
    /**
     * Replaces the current content of the window with the specified {@code Scene}.
     * Adds an action listener to the quit button of the scene and refreshes the window.
     * @param scene the {@code Scene} to be added to the window
     */
    private void addRemove(Scene scene) {
        scene.getQuit().addActionListener(this);
        getContentPane().removeAll();
        getContentPane().add(scene);
        this.revalidate();
    }
    /**
     * Handles action events generated by buttons within the window.
     * <p>
     * Based on the button text, this method transitions between different game states,
     * such as showing categories or different scenes, and updating the window's content.
     * </p>
     * @param e the {@code ActionEvent} that occurred
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        JButton specificButton = (JButton) e.getSource();
        switch(specificButton.getText()) {
            case "Play":
                category = new Categories();
                getContentPane().removeAll();
                getContentPane().revalidate();
                setCategories(category);
                getContentPane().add(category);
                break;
            case "Sport":
                addRemove(new Scene(new Sport()));
                break;
            case "Animals":
                addRemove(new Scene(new Animals()));
                break;
            case "Job":
                addRemove(new Scene(new Job()));
                break;
            case "Food":
                addRemove(new Scene(new Food()));
                break;
            case "Country":
                addRemove(new Scene(new Country()));
                break;
            case "X":
                menu1 = new Menu();
                menu1.playButton().addActionListener(this);
                getContentPane().removeAll();
                getContentPane().revalidate();
                getContentPane().add(menu1);
                break;
        }
    }
}
/**
 * The {@code Main} class is the entry point for the Hangman game application.
 * It creates an instance of the {@code Window} class to start the game.
 */
public class Main {
    /**
     * The main method that serves as the entry point for the application.
     * <p>
     * It initializes the main game window by creating an instance of {@code Window}.
     * </p>
     * @param args command-line arguments (not used)
     */
    public static void main(String[] args) {
        new Window();
    }
}